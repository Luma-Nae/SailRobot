// Generated by gencpp from file sailrobot_custom_msg/AisMultiArray.msg
// DO NOT EDIT!


#ifndef SAILROBOT_CUSTOM_MSG_MESSAGE_AISMULTIARRAY_H
#define SAILROBOT_CUSTOM_MSG_MESSAGE_AISMULTIARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/MultiArrayLayout.h>
#include <sailrobot_custom_msg/Ais.h>

namespace sailrobot_custom_msg
{
template <class ContainerAllocator>
struct AisMultiArray_
{
  typedef AisMultiArray_<ContainerAllocator> Type;

  AisMultiArray_()
    : layout()
    , data()  {
    }
  AisMultiArray_(const ContainerAllocator& _alloc)
    : layout(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::MultiArrayLayout_<ContainerAllocator>  _layout_type;
  _layout_type layout;

   typedef std::vector< ::sailrobot_custom_msg::Ais_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sailrobot_custom_msg::Ais_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> const> ConstPtr;

}; // struct AisMultiArray_

typedef ::sailrobot_custom_msg::AisMultiArray_<std::allocator<void> > AisMultiArray;

typedef boost::shared_ptr< ::sailrobot_custom_msg::AisMultiArray > AisMultiArrayPtr;
typedef boost::shared_ptr< ::sailrobot_custom_msg::AisMultiArray const> AisMultiArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sailrobot_custom_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sailrobot_custom_msg': ['/home/sailboat/catkin_ws/src/SailBoatROS/sailrobot_custom_msg/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9b970ad182fe4ed91c6d7ee1db87e99b";
  }

  static const char* value(const ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9b970ad182fe4ed9ULL;
  static const uint64_t static_value2 = 0x1c6d7ee1db87e99bULL;
};

template<class ContainerAllocator>
struct DataType< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sailrobot_custom_msg/AisMultiArray";
  }

  static const char* value(const ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Message of type AIS Multy Array\n"
"\n"
"std_msgs/MultiArrayLayout layout #Specification of data layout\n"
"Ais[] data		#Array of data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: sailrobot_custom_msg/Ais\n"
"#Header\n"
"Header header\n"
"\n"
"#Message type\n"
"int64 type\n"
"\n"
"#Repeat indicator\n"
"int64 repeat_indic\n"
"\n"
"#MMSI\n"
"int64 mmsi\n"
"\n"
"#Navigation status\n"
"int64 status\n"
"\n"
"#Rate of turn\n"
"int64 rate_of_turn\n"
" \n"
"#Speed over ground\n"
"int64 speed_over_ground\n"
"\n"
"#Position accuracy\n"
"string position_accuracy\n"
"\n"
"#Longitude\n"
"float64 longitude\n"
"\n"
"#Latitude\n"
"float64 latitude\n"
"\n"
"#Course over ground\n"
"int64 course_over_ground\n"
"\n"
"#True heading\n"
"int64 heading\n"
"\n"
"#Distance with our boat\n"
"float64 distance\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.layout);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AisMultiArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sailrobot_custom_msg::AisMultiArray_<ContainerAllocator>& v)
  {
    s << indent << "layout: ";
    s << std::endl;
    Printer< ::std_msgs::MultiArrayLayout_<ContainerAllocator> >::stream(s, indent + "  ", v.layout);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sailrobot_custom_msg::Ais_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SAILROBOT_CUSTOM_MSG_MESSAGE_AISMULTIARRAY_H

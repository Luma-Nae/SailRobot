# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sailrobot_custom_msg/Ais.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Ais(genpy.Message):
  _md5sum = "4be53e55c36ee37d45ff17c6f5ad3256"
  _type = "sailrobot_custom_msg/Ais"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """#Header
Header header

#Message type
int64 type

#Repeat indicator
int64 repeat_indic

#MMSI
int64 mmsi

#Navigation status
int64 status

#Rate of turn
int64 rate_of_turn
 
#Speed over ground
int64 speed_over_ground

#Position accuracy
string position_accuracy

#Longitude
float64 longitude

#Latitude
float64 latitude

#Course over ground
int64 course_over_ground

#True heading
int64 heading

#Distance with our boat
float64 distance


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','type','repeat_indic','mmsi','status','rate_of_turn','speed_over_ground','position_accuracy','longitude','latitude','course_over_ground','heading','distance']
  _slot_types = ['std_msgs/Header','int64','int64','int64','int64','int64','int64','string','float64','float64','int64','int64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,repeat_indic,mmsi,status,rate_of_turn,speed_over_ground,position_accuracy,longitude,latitude,course_over_ground,heading,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ais, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = 0
      if self.repeat_indic is None:
        self.repeat_indic = 0
      if self.mmsi is None:
        self.mmsi = 0
      if self.status is None:
        self.status = 0
      if self.rate_of_turn is None:
        self.rate_of_turn = 0
      if self.speed_over_ground is None:
        self.speed_over_ground = 0
      if self.position_accuracy is None:
        self.position_accuracy = ''
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.course_over_ground is None:
        self.course_over_ground = 0
      if self.heading is None:
        self.heading = 0
      if self.distance is None:
        self.distance = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.type = 0
      self.repeat_indic = 0
      self.mmsi = 0
      self.status = 0
      self.rate_of_turn = 0
      self.speed_over_ground = 0
      self.position_accuracy = ''
      self.longitude = 0.
      self.latitude = 0.
      self.course_over_ground = 0
      self.heading = 0
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6q().pack(_x.type, _x.repeat_indic, _x.mmsi, _x.status, _x.rate_of_turn, _x.speed_over_ground))
      _x = self.position_accuracy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d2qd().pack(_x.longitude, _x.latitude, _x.course_over_ground, _x.heading, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.type, _x.repeat_indic, _x.mmsi, _x.status, _x.rate_of_turn, _x.speed_over_ground,) = _get_struct_6q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_accuracy = str[start:end].decode('utf-8')
      else:
        self.position_accuracy = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.longitude, _x.latitude, _x.course_over_ground, _x.heading, _x.distance,) = _get_struct_2d2qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6q().pack(_x.type, _x.repeat_indic, _x.mmsi, _x.status, _x.rate_of_turn, _x.speed_over_ground))
      _x = self.position_accuracy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2d2qd().pack(_x.longitude, _x.latitude, _x.course_over_ground, _x.heading, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.type, _x.repeat_indic, _x.mmsi, _x.status, _x.rate_of_turn, _x.speed_over_ground,) = _get_struct_6q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_accuracy = str[start:end].decode('utf-8')
      else:
        self.position_accuracy = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.longitude, _x.latitude, _x.course_over_ground, _x.heading, _x.distance,) = _get_struct_2d2qd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6q = None
def _get_struct_6q():
    global _struct_6q
    if _struct_6q is None:
        _struct_6q = struct.Struct("<6q")
    return _struct_6q
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2d2qd = None
def _get_struct_2d2qd():
    global _struct_2d2qd
    if _struct_2d2qd is None:
        _struct_2d2qd = struct.Struct("<2d2qd")
    return _struct_2d2qd
